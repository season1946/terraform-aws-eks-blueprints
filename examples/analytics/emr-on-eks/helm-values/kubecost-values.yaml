# KubeCost WebUI -> kubectl port-forward --namespace kubecost deployment/kubecost-cost-analyzer 9090

nodeSelector:
  NodeGroupType: core
# --set nodeSelector."beta\\.kubernetes\\.io/arch"=arm64

priority:
  enabled: false

networkPolicy:
  enabled: false

podSecurityPolicy:
  enabled: false

global:
  grafana:
    enabled: false
    proxy: false

  # This Prometheus setup is reusing the existing Prometheus deployment
  # Check for more docs under https://guide.kubecost.com/hc/en-us/articles/4407595941015
  prometheus:
    fqdn: http://prometheus-server.prometheus.svc
    enabled: false

# If you have node-exporter and/or KSM running on your cluster, follow this step to disable the Kubecost included versions.
prometheus:
  nodeExporter:
    enabled: false
  serviceAccounts:
    nodeExporter:
      create: false
  kubeStateMetrics:
    enabled: false

#imageVersion: prod-1.96.0 # commented to use the latest

kubecostFrontend:
  image: public.ecr.aws/kubecost/frontend
  imagePullPolicy: Always
  resources:
    requests:
      cpu: "200m"
      memory: "512Mi"

kubecostMetrics:
  emitPodAnnotations: true
  emitNamespaceAnnotations: true
#  nodeSelector:
#    NodeGroupType: core

kubecostModel:
  image: public.ecr.aws/kubecost/cost-model
  imagePullPolicy: Always
  warmCache: true
  warmSavingsCache: true
  etl: true
  etlFileStoreEnabled: true
  etlDailyStoreDurationDays: 91
  maxQueryConcurrency: 5
  # utcOffset represents a timezone in hours and minutes east (+) or west (-)
  # of UTC, itself, which is defined as +00:00.
  # See the tz database of timezones to look up your local UTC offset:
  # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  #  utcOffset: "+00:00"
  resources:
    requests:
      cpu: "500m"
      memory: "512Mi"

# Set this to false if you're bringing your own service account.
#serviceAccount:
#  create: false
#  name: kubecost-cost-analyzer
#  annotations:
#    eks.amazonaws.com/role-arn: <iam-role-arn>

# Define persistence volume for cost-analyzer
persistentVolume:
  size: 32Gi
  dbSize: 32.0Gi
  enabled: true # Note that setting this to false means configurations will be wiped out on pod restart.
  storageClass: gp2
  # existingClaim: kubecost-cost-analyzer # a claim in the same namespace as kubecost

ingress:
  enabled: false
  # className: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
  paths: ["/"] # There's no need to route specifically to the pods-- we have an nginx deployed that handles routing
  hosts:
    - cost-analyzer.local
  tls: []

service:
  type: ClusterIP
  port: 9090
  targetPort: 9090
  # nodePort:
  labels: {}
  annotations: {}

reporting:
  productAnalytics: false
